package com.sqs.nochangeparking.JavaUI;

import javax.swing.*;

import java.awt.*;

import com.sqs.nochangeparking.fitfixtures.*;
import com.sqs.nochangeparking.core.*;

/**
 * @author gibbenss
 * User Interface which provides facility to check system is available and running
 */

/*public class CheckSystem {*/

	
    public class NCPJavaUI extends javax.swing.JFrame {
        
    	
        /** Creates new form CheckSystemGUI */
        public NCPJavaUI() {
            initComponents();
        }
        
        /** This method is called from within the constructor to
         * initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
        private void initComponents() {
            systemExistsButton = new javax.swing.JButton();
            systemNameButton = new javax.swing.JButton();
            systemGreetButton = new javax.swing.JButton();
            
            payForParkingButton = new javax.swing.JButton();
            registeredParkingButton = new javax.swing.JButton();
            parkDifferentVehicleButton = new javax.swing.JButton();
            
            inspectorCheckButton = new javax.swing.JButton();
            checkIfVehiclePaidButton = new javax.swing.JButton();
            registeredVehicleCheckButton = new javax.swing.JButton();

            registerDefaultDetailsButton = new javax.swing.JButton();
            
            /*            JPanel contentPane = new JPanel();*/
            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setTitle("No Change Parking");

            systemExistsButton.setText("Is System There");
            systemExistsButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    systemExistsButtonActionPerformed(evt);
                }
            });
            systemNameButton.setText("Is it the right system");
            systemNameButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    systemNameButtonActionPerformed(evt);
                }
            });
            systemGreetButton.setText("Does it know me");
            systemGreetButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    systemGreetButtonActionPerformed(evt);
                }
            });
            
            payForParkingButton.setText("Unregistered Parking");
            payForParkingButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                	payForParkingButtonActionPerformed(evt);
                }
            });
            registeredParkingButton.setText("Registered Parking");
            registeredParkingButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                	registeredParkingButtonActionPerformed(evt);
                }
            });

            parkDifferentVehicleButton.setText("Park Different Vehicle to Registered");
            parkDifferentVehicleButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                	parkDifferentVehicleButtonActionPerformed(evt);
                }
            });

            inspectorCheckButton.setText("Inspector Vehicle list Check");
            inspectorCheckButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                	InspectorCheckButtonActionPerformed(evt);
                }
            });

            registeredVehicleCheckButton.setText("Registered Vehicle List");
            registeredVehicleCheckButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                	registeredVehicleCheckButtonActionPerformed(evt);
                }
            });

            checkIfVehiclePaidButton.setText("Check if Vehicle Paid");
            checkIfVehiclePaidButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                	checkIfVehicleHasPaidButtonActionPerformed(evt);
                }
            });

            registerDefaultDetailsButton.setText("Register Default Details");
            registerDefaultDetailsButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                	registerDefaultDetailsButtonActionPerformed(evt);
                }
            });

            
            //initialise the array of vehicles which have registered and paid
 //           pfpf.getSetupPayments();

            JPanel p = new JPanel(); //PREFERRED!
            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(p);
            p.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createSequentialGroup()
/*                .addGroup(layout.createSequentialGroup()*/
                            .addContainerGap()
/*                          .addComponent(systemExistsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)*/
                    		.addComponent(systemExistsButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(systemNameButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(systemGreetButton)
                            .addContainerGap(27, Short.MAX_VALUE)
                        );

            layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {systemExistsButton,systemNameButton,systemGreetButton });

            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
/*                .addGroup(layout.createSequentialGroup()*/
                    		.addComponent(systemExistsButton)
                        	.addComponent(systemNameButton)
                            .addComponent(systemGreetButton)
            );
            p.setBorder(BorderFactory.createCompoundBorder(
            		BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black),"Check System"),
                    p.getBorder()));

            JPanel q = new JPanel(); //PREFERRED!
            q.setLayout(new FlowLayout(FlowLayout.CENTER));
            q.setBorder(BorderFactory.createCompoundBorder(
            		BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black),"Pay for Parking"),
                    q.getBorder()));

            q.add(payForParkingButton);
            q.add(registeredParkingButton);
            q.add(parkDifferentVehicleButton);
			
            JPanel r = new JPanel(); //PREFERRED!
            r.setLayout(new FlowLayout(FlowLayout.CENTER));
            r.setBorder(BorderFactory.createCompoundBorder(
            		BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black),"Parking Inspector Functions"),
                    r.getBorder()));

            r.add(inspectorCheckButton);
            r.add(checkIfVehiclePaidButton);
            r.add(registeredVehicleCheckButton);

            JPanel s = new JPanel(); //PREFERRED!
            s.setLayout(new FlowLayout(FlowLayout.CENTER));
            s.setBorder(BorderFactory.createCompoundBorder(
            		BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black),"Register Defaults"),
                    s.getBorder()));

            s.add(registerDefaultDetailsButton);
            
			GridLayout clout = new GridLayout(0,1);
            getContentPane().setLayout(clout);
            getContentPane().add(p);
            getContentPane().add(q);
            getContentPane().add(r);
            getContentPane().add(s);
            
            pack();

        }// </editor-fold>//GEN-END:initComponents

        private void systemExistsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        	//GEN-FIRST:event_convertButtonActionPerformed
        	        CheckAdditionFixture chaf = new CheckAdditionFixture();
        	        chaf.lhs = 1;
        	        chaf.rhs = 7;
        			answer = chaf.result();
        	        systemExistsButton.setText("OK - " + chaf.lhs + " + " + chaf.rhs + " = " + answer);
        	        }//GEN-LAST:event_convertButtonActionPerformed

        private void systemNameButtonActionPerformed(java.awt.event.ActionEvent evt) {
        	//GEN-FIRST:event_convertButtonActionPerformed
        			String appName = GreetingServer.getApplicationName();
        	        systemNameButton.setText(appName);
        	    	}//GEN-LAST:event_convertButtonActionPerformed
        
        private void systemGreetButtonActionPerformed(java.awt.event.ActionEvent evt) {
        	//GEN-FIRST:event_convertButtonActionPerformed
        			//1. Create the frame.
        			JFrame frame = new JFrame("FrameDemo");
        			//2. Optional: What happens when the frame closes?
        			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        			//3. Create components and put them in the frame.
        			CheckSayHelloFixture cshf = new CheckSayHelloFixture();
        			cshf.name = (String)JOptionPane.showInputDialog(
        	                    frame,
        	                    "Enter your name please",
        	                    "Customer Name request",
        	                    JOptionPane.PLAIN_MESSAGE
        	                    );
        			//4. Size the frame.
        			frame.pack();
        			//5. Show it.
        			frame.setVisible(false);

        			retName = cshf.sayHello();
        			systemGreetButton.setText(retName);

        	    	}//GEN-LAST:event_convertButtonActionPerformed

        private void payForParkingButtonActionPerformed(java.awt.event.ActionEvent evt) {
        	
			//GEN-FIRST:event_convertButtonActionPerformed
        			//1. Create the frame.
        			JFrame frame = new JFrame("FrameDemo");
        			//2. Optional: What happens when the frame closes?
        			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        			//3. Create components and put them in the frame.
        			aVehicle = (String)JOptionPane.showInputDialog(
        	                    frame,
        	                    "Enter your car registration please",
        	                    "Vehicle Registration request",
        	                    JOptionPane.PLAIN_MESSAGE
        	                    );
        			//4. Size the frame.
        			frame.pack();
        			//5. Show it.
        			frame.setVisible(false);

        			//1. Create the frame.
        			JFrame aframe = new JFrame("FrameDemo");
        			//2. Optional: What happens when the frame closes?
        			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        			//3. Create components and put them in the frame.
        			aCreditCardNo = (String)JOptionPane.showInputDialog(
        	                    frame,
        	                    "Enter your Credit Card No. please",
        	                    "Credit Card No. request",
        	                    JOptionPane.PLAIN_MESSAGE
        	                    );
        			//4. Size the frame.
        			frame.pack();
        			//5. Show it.
        			frame.setVisible(false);
        			DriverCall dc = cc.newCallFromDriver("Driver Name");
        			retPayment = dc.payForVehicleWithCreditCard(aVehicle, aCreditCardNo);
        			if (retPayment == true){
        				retPayment2 = (aVehicle+" Successfully paid for parking");
        			}
        			else{
        				retPayment2 = "not accepted, this vehicle has already paid";
        			}
    				JOptionPane.showMessageDialog(frame,retPayment2);
        			
        	    	}//GEN-LAST:event_convertButtonActionPerformed

        private void registeredParkingButtonActionPerformed(java.awt.event.ActionEvent evt) {
					JFrame frame = new JFrame("FrameDemo");
					frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
					aName = (String)JOptionPane.showInputDialog(
			                    frame,
			                    "Enter Name",
			                    "Registered Parking",
			                    JOptionPane.PLAIN_MESSAGE
			                    );
					frame.pack();
					frame.setVisible(false);

/*					cc.set_driverList(dl1);*/
					DriverCall dc = cc.newCallFromDriver(aName);
					Driver d1 = dl1.findDriver(aName);
/*					Driver d1 = dc.getDriver();*/
					Object[] options = {"Yes",
		                    "No",
		                    "Cancel"};
					int n = JOptionPane.showOptionDialog(
		                    frame,
		                    "Use your default Car Registration - " + d1.getDefaultVehicle(),
		                    "Registered Parking",
		                    JOptionPane.YES_NO_CANCEL_OPTION,
		                    JOptionPane.QUESTION_MESSAGE, null,  options, options[2]
					);
					frame.pack();
					frame.setVisible(false);
					
					if (n == 0) {
						aVehicle = d1.getDefaultVehicle();}
					else {
						aVehicle = (String)JOptionPane.showInputDialog(
        	                    frame,
        	                    "Enter your car registration please",
        	                    "Vehicle Registration request",
        	                    JOptionPane.PLAIN_MESSAGE
        	                    );}

					n = JOptionPane.showOptionDialog(
		                    frame,
		                    "Use your default Credit Card No - " + d1.getDefaultCreditCard(),
		                    "Registered Parking",
		                    JOptionPane.YES_NO_CANCEL_OPTION,
		                    JOptionPane.QUESTION_MESSAGE, null,  options, options[2]
					);
					frame.pack();
					frame.setVisible(false);
					
					if (n == 0) {
						aCreditCardNo = d1.getDefaultCreditCard();}
					else {
						aCreditCardNo = (String)JOptionPane.showInputDialog(
        	                    frame,
        	                    "Enter your Credit Card No. please",
        	                    "Credit Card No. request",
        	                    JOptionPane.PLAIN_MESSAGE
        	                    );}
					
					System.out.println(n);

					if (aVehicle == null){ 
						return; }
		        	if (aCreditCardNo == null)  {
						return; }
					        
					retPayment = dc.payForVehicleWithCreditCard(aVehicle, aCreditCardNo);
        			if (retPayment == true){
        				retPayment2 = (aVehicle+" Successfully paid for parking");
        			}
        			else{
        				retPayment2 = "not accepted, this vehicle has already paid";
        			}
    				JOptionPane.showMessageDialog(frame,retPayment2);
        			
        	    	}
        
        
        private void parkDifferentVehicleButtonActionPerformed(java.awt.event.ActionEvent evt) {
			JFrame frame = new JFrame("FrameDemo");
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			aName = (String)JOptionPane.showInputDialog(
	                    frame,
	                    "Enter Name",
	                    "Different Vehicle Parking",
	                    JOptionPane.PLAIN_MESSAGE
	                    );
			frame.pack();
			frame.setVisible(false);
			
			DriverCall dc = cc.newCallFromDriver(aName);
/*			Driver d1 = dc.getDriver();*/
			Driver d1 = dl1.findDriver(aName);

			Object[] options = {"Yes",
                    "No",
                    "Cancel"};
			int n = JOptionPane.showOptionDialog(
                    frame,
                    "Your default Car Registration is - " + d1.getDefaultVehicle() + "\n \"Use it ?\"",
                    "Different Vehicle Parking",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null,  options, options[2]
			);
			frame.pack();
			frame.setVisible(false);
			
			if (n == 0) {
				aVehicle = d1.getDefaultVehicle();
				aCreditCardNo = d1.getDefaultCreditCard();}
			else {
				aVehicle = (String)JOptionPane.showInputDialog(
	                    frame,
	                    "Enter your car registration please",
	                    "Vehicle Registration request",
	                    JOptionPane.PLAIN_MESSAGE
	                    );
				aCreditCardNo = (String)JOptionPane.showInputDialog(
	                    frame,
	                    "Enter your Credit Card No. please",
	                    "Credit Card No. request",
	                    JOptionPane.PLAIN_MESSAGE
	                    );}
			frame.pack();
			frame.setVisible(false);

			if (aVehicle == null){ 
				return; }
        	if (aCreditCardNo == null)  {
				return; }

        		retPayment = dc.payForVehicleWithCreditCard(aVehicle, aCreditCardNo);
			if (retPayment == true){
				retPayment2 = (aVehicle+" Successfully paid for parking");
			}
			else{
				retPayment2 = "not accepted, this vehicle has already paid";
			}
			JOptionPane.showMessageDialog(frame,retPayment2);
			
	    	}
        
        private void InspectorCheckButtonActionPerformed(java.awt.event.ActionEvent evt) {
        	//GEN-FIRST:event_convertButtonActionPerformed
        	System.out.println("inschk1");
			JFrame frame = new JFrame("FrameDemo");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            JPanel jp = new JPanel(new GridBagLayout());

/*            protected JTextField textField;
            protected JTextArea textArea;
            private final static String newline = "\n";
*/

            
            textField = new JTextField(20);
            
            textArea = new JTextArea(5, 20);
            textArea.setEditable(false);
            JScrollPane scrollPane = new JScrollPane(textArea);

            //Add Components to this panel.
            GridBagConstraints c = new GridBagConstraints();
            c.gridwidth = GridBagConstraints.REMAINDER;

            c.fill = GridBagConstraints.HORIZONTAL;
//            add(textField, c);
            System.out.println("hh" + tField);

            for (Payment paymentInList : plist) {
    			tField = paymentInList.getVehicle();
    			textArea.append(tField + newline);
            }
                        
            
            textField.selectAll();
            textArea.setCaretPosition(textArea.getDocument().getLength());
            
            c.fill = GridBagConstraints.BOTH;
            c.weightx = 1.0;
            c.weighty = 1.0;
            jp.add(scrollPane, c);
			
			frame.add(jp);
/*            JPanel frame1 = new JPanel(); //PREFERRED!
            frame1.setLayout(new BorderLayout());
            frame1.setBorder(BorderFactory.createCompoundBorder(
            		BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black),"Parking Inspector Functions"),
                    frame1.getBorder()));
        	System.out.println("inschk2");
        	String aText;
        	for (Payment paymentInList : plist) {
    			aText = paymentInList.getVehicle();
    			}
        	
        	//In a container that uses a BorderLayout:
        	
        	JTextArea textArea = new JTextArea("abc");
        	JScrollPane scrollPane = new JScrollPane(textArea);
        	setPreferredSize(new Dimension(450, 110));
        	frame1.add(scrollPane, BorderLayout.CENTER);*/
 //       	frame1.add(scrollPane, BorderLayout.CENTER);
        	System.out.println("inschk3");

        	frame.pack();
			frame.setVisible(true);
        	
        	}//GEN-LAST:event_convertButtonActionPerformed

        
        
        private void checkIfVehicleHasPaidButtonActionPerformed(java.awt.event.ActionEvent evt) {
			JFrame frame = new JFrame("FrameDemo");
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			aVehicle = (String)JOptionPane.showInputDialog(
	                    frame,
	                    "Enter car registration to be checked please",
	                    "Vehicle Registration request",
	                    JOptionPane.PLAIN_MESSAGE
	                    );
			frame.pack();
			frame.setVisible(false);
			
			retPayment = cc.vehicleHasPaid(aVehicle);
			if (retPayment == true){
				retPayment2 = (aVehicle+" has paid");
			}
			else{
				retPayment2 = "Vehicle has not Paid";
			}
			JOptionPane.showMessageDialog(frame,retPayment2);
			
	    	}
        
        private void registeredVehicleCheckButtonActionPerformed(java.awt.event.ActionEvent evt) {

			JFrame frame = new JFrame("FrameDemo");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            JPanel jp = new JPanel(new GridBagLayout());
            
            textField = new JTextField(20);
            
            textArea = new JTextArea(5, 20);
            textArea.setEditable(false);
            JScrollPane scrollPane = new JScrollPane(textArea);

            //Add Components to this panel.
            GridBagConstraints c = new GridBagConstraints();
            c.gridwidth = GridBagConstraints.REMAINDER;

            c.fill = GridBagConstraints.HORIZONTAL;

            for (Driver driverInList : dl1) {
    			tField = ("Driver = " + driverInList.getName() + ", ");
    			textArea.append(tField);
    			tField = ("Default Vehicle = " + driverInList.getDefaultVehicle() + ", ");
    			textArea.append(tField);
    			tField = ("Default Credit Card Number = " + driverInList.getDefaultCreditCard());
    			textArea.append(tField + newline);
            }
            
            textField.selectAll();
            textArea.setCaretPosition(textArea.getDocument().getLength());
            
            c.fill = GridBagConstraints.BOTH;
            c.weightx = 1.0;
            c.weighty = 1.0;
            jp.add(scrollPane, c);
			
			frame.add(jp);
        	frame.pack();
			frame.setVisible(true);
        	
        	}
        
        private void registerDefaultDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {
			JFrame frame = new JFrame("FrameDemo");
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			aName = (String)JOptionPane.showInputDialog(
	                    frame,
	                    "Enter Name",
	                    "Default Details",
	                    JOptionPane.PLAIN_MESSAGE
	                    );
			frame.pack();
			frame.setVisible(false);

			aVehicle = (String)JOptionPane.showInputDialog(
	                    frame,
	                    "Enter Car Registration",
	                    "Default Details",
	                    JOptionPane.PLAIN_MESSAGE
	                    );
			frame.pack();
			frame.setVisible(false);

			aCreditCardNo = (String)JOptionPane.showInputDialog(
		                frame,
		                "Enter Credit Card Number",
		                "Default Details",
		                JOptionPane.PLAIN_MESSAGE
		                );
			frame.pack();
			frame.setVisible(false);			

			DriverCall dc = cc.newCallFromDriver(aName);
			Driver d1 = dc.getDriver();
			boolean ret1 = d1.registerVehicle(aVehicle);
			d1.registerCard(aCreditCardNo);
			dl1.add(d1);

			/*			DriversList a1 = cc.getDriversList();*/
			
			/*public SetupDefaultsFixture sud = dcrdd.setupDefaults();
			sud.driverDefaultVehicleDefaultCreditCard(aName, aVehicle, aCreditCardNo);*/
			
			if (ret1 == true){
				JOptionPane.showMessageDialog(frame,aName + " details successfully registered");
			}
			else{
				JOptionPane.showMessageDialog(frame,aName + " not registered");
			}
			
	    	}

        
        
        /**
    	 * @param args
    	 */
    	public static void main(String[] args) {

    		java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new NCPJavaUI().setVisible(true);
                }
            });
        }   
    	
    	// Variables declaration - do not modify//GEN-BEGIN:variables
    	public static String retName;
    	public static Integer answer;
    	public static String appName;
    	public static String aVehicle;
    	public static String aCreditCardNo;
    	public static Boolean retPayment;
    	public static String retPayment2;

    	private javax.swing.JLabel systemExistsLabel;
        private javax.swing.JButton systemExistsButton;
        private javax.swing.JLabel systemNameLabel;
        private javax.swing.JButton systemNameButton;
        private javax.swing.JLabel systemGreetLabel;
        private javax.swing.JButton systemGreetButton;
        
        private javax.swing.JButton payForParkingButton;
        private javax.swing.JButton parkDifferentVehicleButton;
        private javax.swing.JButton registeredParkingButton;
        
        private javax.swing.JButton inspectorCheckButton;
        private javax.swing.JButton checkIfVehiclePaidButton;
        private javax.swing.JButton registeredVehicleCheckButton;
        
        private javax.swing.JButton registerDefaultDetailsButton;

        public static CallCentre cc = CallCentre.getInstance();
		PaymentsList plist = cc.getTodaysPayments();
		DriversList dl1 = cc.getDrivers();

	
		protected String tField;
		protected JTextField textField;
        protected JTextArea textArea;
        private final static String newline = "\n";
        
        private String aName;
        // End of variables declaration//GEN-END:variables    	
    	
}

